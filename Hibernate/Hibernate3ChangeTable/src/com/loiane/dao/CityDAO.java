package com.loiane.dao;

import java.util.Iterator;
import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.mapping.RootClass;

import com.loiane.com.model.City;
import com.loiane.util.HibernateUtil;

/**
 * City DAO
 * Interacts with database.
 * Implemented for academic purposes.
 * 
 * @author Loiane Groner
 * http://loianegroner.com (English)
 * http://loiane.com (Portuguese)
 */
public class CityDAO {
	
	
	/**
	 * Inserts a row in the City table.
	 * Do not need to pass the id, it will be generated.
	 * @param cityName 
	 * @return id generated by the database
	 */
	public Long saveCity(String cityName)
	{
		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		Session session = sessionFactory.openSession();
		AnnotationConfiguration configuration = HibernateUtil.getConfiguration();
		
		Transaction transaction = null;
		Long cityId = null;
		try {
			transaction = session.beginTransaction();
			City city = new City();
			city.setName(cityName);
			cityId = (Long) session.save(city);
			transaction.commit();
		} catch (HibernateException e) {
			transaction.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}
		return cityId;
	}
	
	public void changeTable() 
	{
		AnnotationConfiguration configuration = HibernateUtil.getConfiguration();
		Iterator iterator = configuration.getClassMappings();
        while (iterator.hasNext()) {              
          RootClass rootClass = (RootClass)iterator.next(); 
          System.out.println("&&&&: "+rootClass.getTable().getName()); 
          if (rootClass.getTable().getName().equals("CITY")){ 
             rootClass.getTable().setName("NEW_CITY"); 
             HibernateUtil.setSessionFactory(configuration.buildSessionFactory()); 
             break;                            
          } 
        } 
	}
	
}
